/*
 * Copyright 2000-2018 Distrelec Group AG. All rights reserved.
 */

package com.namics.distrelec.b2b.core.service.newsletter.jobs;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.opencsv.CSVWriter;

import de.hybris.platform.core.model.ItemModel;
import de.hybris.platform.cronjob.enums.CronJobResult;
import de.hybris.platform.cronjob.enums.CronJobStatus;
import de.hybris.platform.cronjob.model.CronJobModel;
import de.hybris.platform.servicelayer.config.ConfigurationService;
import de.hybris.platform.servicelayer.cronjob.AbstractJobPerformable;
import de.hybris.platform.servicelayer.cronjob.PerformResult;
import de.hybris.platform.servicelayer.model.ModelService;

/**
 * {@code AbstractCSVExporterJob}
 * 
 * @param <T>
 *
 * @author <a href="marco.dellanna@distrelec.com">Marco Dell'Anna</a>, Distrelec
 * @author <a href="nabil.benothman@distrelec.com">Nabil Benothman</a>, Distrelec
 * @since Distrelec 6.7
 */
public abstract class AbstractCSVExporterJob<T extends CronJobModel, S extends ItemModel> extends AbstractJobPerformable<T> {
    
    private static final Logger LOG = LogManager.getLogger(AbstractCSVExporterJob.class);
    
    @Autowired
    private ConfigurationService configurationService;
    
    /*
     * (non-Javadoc)
     * 
     * @see de.hybris.platform.servicelayer.cronjob.AbstractJobPerformable#perform(de.hybris.platform.cronjob.model.CronJobModel)
     */
    @Override
    public PerformResult perform(final T cronJob) {
        final long startTime = System.nanoTime();
        LOG.info("Starting " + this.getClass().getSimpleName() + " export CronJob at " + new Date());
        boolean success = true;
        try {
            final List<S> items = findItemsToExport();
            LOG.info(items.size() + " items found");
            exportItems(items, cronJob);
        } catch (final Exception exp) {
            LOG.error("An error occurs while exporting the items", exp);
            success = false;
        }
        CronJobResult cronJobResult = success ? CronJobResult.SUCCESS : CronJobResult.ERROR;
        if(success) {
            onSuccess(cronJob);
        } else {
            onFailure(cronJob);
        }

        LOG.info(this.getClass().getSimpleName() + "finished exporting in " + (int) ((System.nanoTime() - startTime) / 1e9) + " seconds. Result is " + cronJobResult.getCode());
        return new PerformResult(cronJobResult, CronJobStatus.FINISHED);
    }
    
    /**
     * 
     * @return the name of the prefix for the name of the file that will be generated by the export
     */
    protected abstract String getExportFileNamePrefix();

    /**
     * 
     * @return an hybris property name which contains the path in which the export file will be created
     */
    protected abstract String getExportDirectoryProperty();

    /**
     * 
     * @return the name of each field that will be exported. These will be the first row of the exported file
     */
    protected abstract String[] getHeaders();

    /**
     * 
     * @return the items that will be exported
     */
    protected abstract List<S> findItemsToExport();

    /**
     * 
     * @param item the item to write on file
     * @return an array of String, each one will be a cell in the exported row.
     */
    protected abstract String[] exportItem(final S item);

    /**
     * This method is executed only if job is succesful.
     * @param cronJob the performed {@code CronJobModel}
     */
    public void onSuccess(final T cronJob) {
        if (getModelService().isModified(cronJob)) {
            getModelService().save(cronJob);
        }
    }

    /**
     * This method is executed only if job fails.
     * @param cronJob the performed {@code CronJobModel}
     */
    public void onFailure(final T cronJob) {
        LOG.error("Error occur during the perform task!");
    }

    /**
     * converts the items to CSV file and save it to a directory specified by {@code getExportDirectoryProperty()}
     * @param items the item to write on file
     * @param cronJob the performed {@code CronJobModel}
     * @throws IOException when there is a problem generating the exported file
     */
    protected void exportItems(final List<S> items, final T cronJob) throws IOException {
        final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd", Locale.ENGLISH);
        final String exportPath = getConfigurationService().getConfiguration().getString(getExportDirectoryProperty());
        final File exportDir = new File(exportPath);
        if (!(exportDir.exists() || exportDir.mkdirs())) {
            throw new IOException("Unable to create the export folder [Path: " + exportPath + "]");
        }
        final String fileName = exportPath.endsWith(File.separator) ? exportPath + getExportFileNamePrefix() + dateFormat.format(new Date()) + ".csv"
                : exportPath + File.separator + getExportFileNamePrefix() + dateFormat.format(new Date()) + ".csv";
        LOG.info("Export destination file : " + fileName);
        final CSVWriter csvWriter = new CSVWriter(new FileWriter(fileName), ';');

        // Write the header line
        csvWriter.writeNext(getHeaders());
        items.forEach(item -> {
            try {
                csvWriter.writeNext(exportItem(item));
                csvWriter.flush();
            } catch (final IOException e) {
                LOG.error("ERROR occur during the export of the item " + item.toString(), e);
            }
        });

        csvWriter.close();
    }

    // Getters & Setters

    public ConfigurationService getConfigurationService() {
        return configurationService;
    }

    public void setConfigurationService(final ConfigurationService configurationService) {
        this.configurationService = configurationService;
    }
    
    public ModelService getModelService() {
        return modelService;
    }
}
