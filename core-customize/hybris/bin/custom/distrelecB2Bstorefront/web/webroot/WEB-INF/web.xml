<?xml version="1.0" encoding="iso-8859-1"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
		http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

	<display-name>distrelecB2Bstorefront</display-name>

	<!-- We have to explicitly clear the welcome file list. We don't need to serve a default or index page as we can handle all the requests via spring MVC. -->
	<welcome-file-list>
		<welcome-file />
	</welcome-file-list>


	<!-- filters -->
	
	<filter>
		<filter-name>XSSFilter</filter-name>
		<filter-class>com.namics.distrelec.b2b.storefront.security.filters.DistXSSFilter</filter-class>
		<async-supported>true</async-supported>
	</filter>

	<filter>
		<filter-name>IfNoneMatchFilter</filter-name>
		<filter-class>com.namics.distrelec.b2b.storefront.filters.cache.IfNoneMatchFilter</filter-class>
	</filter>

	<filter>
		<filter-name>eventsHandlerFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetBeanName</param-name>
			<param-value>eventsHandlerFilter</param-value>
		</init-param>
	</filter>

	<filter>
		<filter-name>DistUiMediaExpiresFilter</filter-name>
		<filter-class>org.apache.catalina.filters.ExpiresFilter</filter-class>
		<init-param>
			<param-name>ExpiresDefault</param-name>
			<param-value>access plus 1 week</param-value>
		</init-param>
	</filter>

	<filter>
		<filter-name>DistUiCacheExpiresFilter</filter-name>
		<filter-class>org.apache.catalina.filters.ExpiresFilter</filter-class>
		<init-param>
			<param-name>ExpiresDefault</param-name>
			<param-value>access plus 1 year</param-value>
		</init-param>
	</filter>

	<filter>
		<filter-name>XSSWrapperFilter</filter-name>
		<filter-class>com.namics.distrelec.b2b.storefront.security.filters.DistXSSWrapperFilter</filter-class>
		<async-supported>true</async-supported>
		<init-param>
			<param-name>excludedURLs</param-name>
			<param-value>.*/invoice-document-url/archive</param-value>
		</init-param>
	</filter>

	<filter>
		<filter-name>distXFrameOptionsFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetBeanName</param-name>
			<param-value>distXFrameOptionsFilter</param-value>
		</init-param>
	</filter>

	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter>
		<description>
			ResourceFilter
			Filter used to server file resources by bypassing the other filters.
		</description>
		<filter-name>resourceFilter</filter-name>
		<filter-class>com.namics.distrelec.b2b.storefront.servlets.ResourceFilter</filter-class>
	</filter>

	<!-- spring based filter chain -->
	<filter>
		<description>
			Spring configured based chain of the spring configurable filter beans
		</description>
		<filter-name>storefrontFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<filter>
		<description>
			SpringSecurityFilterChain
			Supports delegating to a chain of spring configured filters. The filter name
			must match the bean name.
		</description>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<!-- START-NAMICS-CHANGE : Terrific Support -->
	<!-- Terrific CSS Resource Filter -->
	<filter>
		<description>
			terrificCssResourceFilter
			Filter used to deliver terrific CSS resources by bypassing the other filters.
		</description>
		<filter-name>terrificCssResourceFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetBeanName</param-name>
			<param-value>namicsTerrificStyleSheetStaticResourceFilterBean</param-value>
		</init-param>
	</filter>

	<!-- Terrific JavaScript Resource Filter -->
	<filter>
		<description>
			terrificJsResourceFilter
			Filter used to deliver terrific JS resources by bypassing the other filters.
		</description>
		<filter-name>terrificJsResourceFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetBeanName</param-name>
			<param-value>namicsTerrificJavaScriptStaticResourceFilterBean</param-value>
		</init-param>
	</filter>
	<!-- END-NAMICS-CHANGE : Terrific Support -->

	<!-- filter mappings -->

	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>XSSWrapperFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>XSSFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>IfNoneMatchFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>DistUiMediaExpiresFilter</filter-name>
		<url-pattern>/_ui/all/media/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
	</filter-mapping>

	<filter-mapping>
		<filter-name>DistUiCacheExpiresFilter</filter-name>
		<url-pattern>/_ui/all/cache/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
	</filter-mapping>

	<filter-mapping>
		<filter-name>eventsHandlerFilter</filter-name>
		<url-pattern>/events</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>resourceFilter</filter-name>
		<url-pattern>/_ui/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>storefrontFilterChain</filter-name>
		<servlet-name>DispatcherServlet</servlet-name>
	</filter-mapping>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<servlet-name>DispatcherServlet</servlet-name>
	</filter-mapping>
	<filter-mapping>
		<filter-name>distXFrameOptionsFilter</filter-name>
		<servlet-name>DispatcherServlet</servlet-name>
	</filter-mapping>

	<!-- START-NAMICS-CHANGE : Terrific Support -->
	<filter-mapping>
		<filter-name>terrificCssResourceFilter</filter-name>
		<url-pattern>/terrific/css/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>terrificJsResourceFilter</filter-name>
		<url-pattern>/terrific/js/*</url-pattern>
	</filter-mapping>
	<!-- END-NAMICS-CHANGE : Terrific Support -->

	<!-- HTTP Session Listeners -->

	<listener>
		<description>
			The HybrisContextLoaderListener extends the usual SpringContextLoaderListener (which loads
			the context from specified location) by adding the global application context of
			the platform as parent context. With having the global context set as parent you can access
			or override beans of the global context and get the 'tenant' scope.
		</description>
		<!--<listener-class>de.hybris.platform.spring.HybrisContextLoaderListener</listener-class>-->
		<listener-class>com.namics.distrelec.b2b.storefront.filters.HybrisStorefrontContextLoaderListener</listener-class>
	</listener>

	<listener>
		<description>
			The RequestContextListener exposes the 'request' scope to the context.
			Furthermore it is needed when overriding the 'jalosession' bean for your web application.
		</description>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>

	<listener>
		<listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
	</listener>

	<!-- config -->
	<context-param>
		<description>
			The 'contextConfigLocation' param specifies where your configuration files are located.
			The 'WEB-INF/config/web-application-config.xml' file includes several other XML config
			files to build up the configuration for the application.
		</description>
		<param-name>contextConfigLocation</param-name>
		<param-value>WEB-INF/config/web-application-config.xml</param-value>
	</context-param>

	<!-- Servlets -->
	<servlet>
		<description>
			DispatcherServlet
			Spring MVC dispatcher servlet. This is the entry point for the Spring MVC application.
		</description>
		<servlet-name>DispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<description>
				Specifies the location for Spring MVC to load an additional XML configuration file.
				Because hybris is already configured with the XML spring configuration files to load
				we must set this param value to EMPTY in order to prevent loading of the default
				/WEB-INF/applicationContext.xml file.
			</description>
			<param-name>contextConfigLocation</param-name>
			<param-value></param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet>
		<servlet-name>CompressServlet</servlet-name>
		<servlet-class>com.granule.CompressServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>


	<servlet-mapping>
		<servlet-name>CompressServlet</servlet-name>
		<url-pattern>/combined.js</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>CompressServlet</servlet-name>
		<url-pattern>/combined.css</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>DispatcherServlet</servlet-name>
		<!-- Map all requests to the DispatcherServlet -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<error-page>
		<error-code>400</error-code>
		<location>/WEB-INF/views/desktop/fragments/terrific/error/400.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/views/desktop/fragments/terrific/error/404.jsp</location>
	</error-page>
	<error-page>
		<error-code>405</error-code>
		<location>/WEB-INF/views/desktop/fragments/terrific/error/405.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/WEB-INF/views/desktop/fragments/terrific/error/500.jsp</location>
	</error-page>


	<!-- Session -->

	<session-config>
		<!-- Session timeout of x minutes -->
		<!-- must match default.session.timeout in local.properties -->
		<session-timeout>120</session-timeout>
	</session-config>


	<!-- JSP Configuration -->

	<jsp-config>
		<jsp-property-group>
			<url-pattern>*.jsp</url-pattern>
			<page-encoding>UTF-8</page-encoding>
			<!-- Disable JSP scriptlets and expressions -->
			<scripting-invalid>true</scripting-invalid>
			<!-- Remove additional whitespace due to JSP directives -->
			<trim-directive-whitespaces>true</trim-directive-whitespaces>
		</jsp-property-group>
	</jsp-config>
</web-app>
