<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
--><!--
 All hybris buildcallbacks.xml macrodefinitions:
 
 Build/Documentation
 
	 before/after ant macro "clean"
		 <macrodef name="distrelectomcat_before_clean"/>
		 <macrodef name="distrelectomcat_after_clean"/>
	 
	 before/after ant macro "build"
		 <macrodef name="distrelectomcat_before_build"/>
		 <macrodef name="distrelectomcat_after_build"/>
		 
	 before/after ant macro "compile_core" - the core module of the extension
		 <macrodef name="distrelectomcat_before_compile_core">
		 <macrodef name="distrelectomcat_after_compile_core">
	 
	 before/after ant macro "compile_web" - the web module of the extension
		 <macrodef name="distrelectomcat_before_compile_web" />
		 <macrodef name="distrelectomcat_after_compile_web" />
	 
	 before/after ant macro "compile_hmc" - the hmc module of the extension
		 <macrodef name="distrelectomcat_before_compile_hmc" />
		 <macrodef name="distrelectomcat_after_compile_hmc" />
 
 Preparing extension
 
	 will be called in the beginning of the ant call and only once (also when using multiple 
	 ant targets e.g. ant build yunittest)	
		 <macrodef name="distrelectomcat_only_once_prepare"/>
 
 Creating ear module/production
 
	 before/after ant macro "ear"
		 <macrodef name="distrelectomcat_before_ear"/>
		 <macrodef name="distrelectomcat_after_ear"/>

	 before/after ant macro "production" - for hybris server only
		 <macrodef name="distrelectomcat_before_production" />
		 <macrodef name="distrelectomcat_after_production" />
 
 JUnit Test
 
	 before/after ant macro "yunitinit" 
		 <macrodef name="distrelectomcat_before_yunitinit" />
		 <macrodef name="distrelectomcat_after_yunitinit" />
	 
	 before/after ant macro "yunit"
		 <macrodef name="distrelectomcat_before_yunit" />
		 <macrodef name="distrelectomcat_after_yunit" /> 
		 
 Distribution package
 
 	 before/after ant macro "dist" - internal target; only for use when platform is available in source code
		 <macrodef name="distrelectomcat_after_dist"/>
		 <macrodef name="distrelectomcat_before_dist"/>
	 
	 before/after ant macro "dist_copy" - internal target; only for use when platform is available in source code
		 <macrodef name="distrelectomcat_before_dist_copy"/>
		 <macrodef name="distrelectomcat_after_dist_copy"/>
		  
 	 With these filters you can override the default extension filters defined in platform/resources/ant/dist/filtersets.xml
 	  	 <patternset id="extension.distrelectomcat.binary.filter">
 	  	  	 <patternset refid="extension.filter" />
 	  	  	 <exclude name="**/*-source.jar" />
 	  	 </patternset>
 	  	 <patternset id="extension.distrelectomcat.source.filter">
 	  	  	 <exclude name="**/bin/**" />
 	  	 </patternset>
     With this filter you can decide what should be excluded from development zip.
 	  	 <patternset id="extension.distrelectomcat.devzip.filter">
 	  	 Include all files from extension.source.filter.
 	  	     <patternset refid="extension.source.filter" />
         Exclude unwanted files.
 	  	  	 <exclude name="lib/exclude-me.jar" />
 	  	 </patternset>
 
-->
<project name="distrelectomcat_buildcallbacks">

    <macrodef name="distrelectomcat_after_build">
        <sequential>
            <echo message="Packaging distrelectomcat.jar to ${bundled.server.home}/lib/" />
            <jar basedir="${ext.distrelectomcat.path}/classes"
                 destfile="${bundled.server.home}/lib/distrelectomcat.jar" />


            <echo message="Composing enhancedytomcat.jar to ${HYBRIS_TEMP_DIR}/enhancedytomcat.jar" />
            <zip destfile="${HYBRIS_TEMP_DIR}/enhancedytomcat.jar">
                <zipgroupfileset dir="${bundled.server.home}/lib" includes="distrelectomcat.jar" />
                <zipgroupfileset dir="${platformhome}/bootstrap/bin" includes="ytomcat.jar" />
            </zip>
        </sequential>
    </macrodef>

</project>
